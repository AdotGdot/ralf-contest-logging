using AutoMapper;
using Ralf.ContestLogging.Common.Types;
using Ralf.Logging.Common.Types.Responses;

namespace Ralf.LoggingWebService
{
    public class QsoToLogEntryMappingProfile : Profile
    {
        public QsoToLogEntryMappingProfile()
        {
            CreateMap<Qso, LogEntry>()
                .ForMember(d => d.Amplifier, opt => opt.MapFrom(s => s.Amplifier))
                .ForMember(d => d.AmplifierId, opt => opt.Ignore())
                .ForMember(d => d.Antenna, opt => opt.MapFrom(s => s.Antenna))
                .ForMember(d => d.AntennaId, opt => opt.Ignore())
                .ForMember(d => d.ArrlSectionAbbr, opt => opt.MapFrom(s => s.ArrlSection))
                .ForMember(d => d.ArrlSectionId, opt => opt.Ignore())
                .ForMember(d => d.Band, opt => opt.MapFrom(s => s.BandAsString))
                .ForMember(d => d.BandId, opt => opt.Ignore())
                .ForMember(d => d.Callsign, opt => opt.MapFrom(s => s.Callsign))
                .ForMember(d => d.CanadianProvinceAbbr, opt => opt.MapFrom(s => s.CanadianProvince))
                .ForMember(d => d.CanadianProvinceId, opt => opt.Ignore())
                .ForMember(d => d.CanadianProvinceName, opt => opt.Ignore())
                .ForMember(d => d.City, opt => opt.MapFrom(s => s.City))
                .ForMember(d => d.Comment, opt => opt.MapFrom(s => s.Comments))
                .ForMember(d => d.Contest, opt => opt.MapFrom(s => s.ContestName))
                .ForMember(d => d.ContestId, opt => opt.Ignore())
                .ForMember(d => d.ContinentAbbr, opt => opt.MapFrom(s => s.Continent))
                .ForMember(d => d.ContinentId, opt => opt.Ignore())
                .ForMember(d => d.ContinentName, opt => opt.Ignore())
                .ForMember(d => d.CqZone, opt => opt.MapFrom(s => s.CqZone))
                .ForMember(d => d.Deleted, opt => opt.Ignore())
                .ForMember(d => d.DistanceInKilometers, opt => opt.MapFrom(s => s.DistanceInKilometers))
                .ForMember(d => d.DxccAdif, opt => opt.MapFrom(s => s.AdifId))
                .ForMember(d => d.DxccEntity, opt => opt.Ignore())
                .ForMember(d => d.ExchangeRcvd, opt => opt.MapFrom(s => s.ExchangeRcvd))
                .ForMember(d => d.ExchangeSent, opt => opt.MapFrom(s => s.ExchangeSent))
                .ForMember(d => d.Frequency, opt => opt.MapFrom(s => s.Frequency))
                .ForMember(d => d.GridSquare, opt => opt.MapFrom(s => s.GridSquare))
                .ForMember(d => d.Iota, opt => opt.Ignore())
                .ForMember(d => d.ItuZone, opt => opt.MapFrom(s => s.ItuZone))
                .ForMember(d => d.MexicanStateAbbr, opt => opt.MapFrom(s => s.MexicanStateAbbr))
                .ForMember(d => d.MexicanStateId, opt => opt.Ignore())
                .ForMember(d => d.MexicanStateName, opt => opt.Ignore())
                .ForMember(d => d.Mode, opt => opt.MapFrom(s => s.Mode))
                .ForMember(d => d.ModeId, opt => opt.Ignore())
                .ForMember(d => d.Multiplier, opt => opt.MapFrom(s => s.Multiplier))
                .ForMember(d => d.Name, opt => opt.MapFrom(s => s.Name))
                .ForMember(d => d.Points, opt => opt.MapFrom(s => s.Points))
                .ForMember(d => d.Power, opt => opt.MapFrom(s => s.Power))
                .ForMember(d => d.QslRcvd, opt => opt.Ignore())
                .ForMember(d => d.QslSent, opt => opt.Ignore())
                .ForMember(d => d.QslVia, opt => opt.Ignore())
                .ForMember(d => d.QsoDateTime, opt => opt.MapFrom(s => s.DateTime))
                .ForMember(d => d.QsoGuid, opt => opt.MapFrom(s => s.Id))
                .ForMember(d => d.RacSectionAbbr, opt => opt.MapFrom(s => s.RacSectionAbbr))
                .ForMember(d => d.RacSectionId, opt => opt.Ignore())
                .ForMember(d => d.RacSectionName, opt => opt.Ignore())
                .ForMember(d => d.Receiver, opt => opt.MapFrom(s => s.Receiver))
                .ForMember(d => d.ReceiverId, opt => opt.Ignore())
                .ForMember(d => d.ReportRcvd, opt => opt.MapFrom(s => s.ReportRcvd))
                .ForMember(d => d.ReportSent, opt => opt.MapFrom(s => s.ReportSent))
                .ForMember(d => d.SerialNumberRcvd, opt => opt.MapFrom(s => s.SerialNumberRcvd))
                .ForMember(d => d.SerialNumberSent, opt => opt.MapFrom(s => s.SerialNumberSent))
                .ForMember(d => d.TenTenNumber, opt => opt.MapFrom(s => s.TenTenNumber))
                .ForMember(d => d.Transmitter, opt => opt.MapFrom(s => s.Transmitter))
                .ForMember(d => d.TransmitterId, opt => opt.Ignore())
                .ForMember(d => d.UsCountyAbbr, opt => opt.MapFrom(s => s.UsCountyAbbr))
                .ForMember(d => d.UsCountyId, opt => opt.Ignore())
                .ForMember(d => d.UsCountyName, opt => opt.Ignore())
                .ForMember(d => d.UsStateAbbr, opt => opt.MapFrom(s => s.USState))
                .ForMember(d => d.UsStateId, opt => opt.Ignore())
                .ForMember(d => d.UsStateName, opt => opt.Ignore());
        }
    }
}